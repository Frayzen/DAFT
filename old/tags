!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BINDIR	Makefile	/^BINDIR   = bin$/;"	m
CC	Makefile	/^CC       = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS   = -std=c99 -Wall -Werror $/;"	m
DIV_IMG_THREAD	src/image_renderer.c	3;"	d	file:
FOV	include/architecture.h	/^    size_t FOV;$/;"	m	struct:camera	access:public
FPS_UPPER_LIMIT	include/image_renderer.h	/^    size_t FPS_UPPER_LIMIT;$/;"	m	struct:app_params	access:public
INCLUDES	Makefile	/^INCLUDES := $(wildcard $(SRCDIR)\/*.h)$/;"	m
LBBOX	include/architecture.h	31;"	d
LFLAGS	Makefile	/^LFLAGS   = -Wall -Werror $/;"	m
LIBS	Makefile	/^LIBS = -fopenmp -pthread -lm -ldl `pkg-config --cflags gtk+-3.0 --libs sdl2 SDL2_image` -g -fsanitize=address$/;"	m
LINKER	Makefile	/^LINKER   = gcc$/;"	m
MAX_CAM	include/utils.h	6;"	d
MAX_CAM	src/utils.c	3;"	d	file:
MAX_LIGHT	include/utils.h	7;"	d
MAX_LIGHT	src/utils.c	4;"	d	file:
MAX_MESH	include/utils.h	8;"	d
MAX_MESH	src/utils.c	5;"	d	file:
MAX_RAY	src/utils.c	6;"	d	file:
MAX_TRI	include/utils.h	9;"	d
MAX_VERT	include/utils.h	10;"	d
M_PI	include/utils.h	5;"	d
OBJDIR	Makefile	/^OBJDIR   = obj$/;"	m
OBJECTS	Makefile	/^OBJECTS  := $(SOURCES:$(SRCDIR)\/%.c=$(OBJDIR)\/%.o)$/;"	m
SOURCES	Makefile	/^SOURCES  := $(wildcard $(SRCDIR)\/*.c)$/;"	m
SRCDIR	Makefile	/^SRCDIR   = src$/;"	m
TARGET	Makefile	/^TARGET   = DAFT_dev$/;"	m
add	include/utils.h	/^point add(point a, point b);$/;"	p	signature:(point a, point b)
add	src/utils.c	/^point add(point a, point b){$/;"	f	signature:(point a, point b)
add_camera	include/utils.h	/^void add_camera(world * w, camera * cam);$/;"	p	signature:(world * w, camera * cam)
add_camera	src/utils.c	/^void add_camera(world * w, camera * cam)$/;"	f	signature:(world * w, camera * cam)
add_light	include/utils.h	/^void add_light(world * w, light * l);$/;"	p	signature:(world * w, light * l)
add_light	src/utils.c	/^void add_light(world * w, light * l)$/;"	f	signature:(world * w, light * l)
add_mesh	include/utils.h	/^void add_mesh(world * w, mesh * m);$/;"	p	signature:(world * w, mesh * m)
add_mesh	src/utils.c	/^void add_mesh(world * w, mesh * m)$/;"	f	signature:(world * w, mesh * m)
add_tri	include/utils.h	/^void add_tri(mesh * m, size_t a, size_t b, size_t c);$/;"	p	signature:(mesh * m, size_t a, size_t b, size_t c)
add_tri	src/utils.c	/^void add_tri(mesh * m, size_t a, size_t b, size_t c)$/;"	f	signature:(mesh * m, size_t a, size_t b, size_t c)
add_tri_to_bbox	include/bbox.h	/^void add_tri_to_bbox(mesh* m, bbox *b, size_t depth, triangle *t);$/;"	p	signature:(mesh* m, bbox *b, size_t depth, triangle *t)
add_tri_to_bbox	src/bbox.c	/^void add_tri_to_bbox(mesh* m, bbox *b, size_t depth, triangle *t){$/;"	f	signature:(mesh* m, bbox *b, size_t depth, triangle *t)
add_vertex	include/utils.h	/^void add_vertex(mesh * m, float x, float y, float z);$/;"	p	signature:(mesh * m, float x, float y, float z)
add_vertex	src/utils.c	/^void add_vertex(mesh * m, float x, float y, float z)$/;"	f	signature:(mesh * m, float x, float y, float z)
addp	include/utils.h	/^void addp(point *a, point*b);$/;"	p	signature:(point *a, point*b)
addp	src/utils.c	/^void addp(point * a, point * b)$/;"	f	signature:(point * a, point * b)
app_params	include/image_renderer.h	/^struct app_params{$/;"	s
app_params	include/image_renderer.h	/^} typedef app_params;$/;"	t
app_params::FPS_UPPER_LIMIT	include/image_renderer.h	/^    size_t FPS_UPPER_LIMIT;$/;"	m	struct:app_params	access:public
app_params::cam	include/image_renderer.h	/^    camera* cam;$/;"	m	struct:app_params	access:public
app_params::height	include/image_renderer.h	/^    size_t height;$/;"	m	struct:app_params	access:public
app_params::renderer	include/image_renderer.h	/^    SDL_Renderer* renderer;$/;"	m	struct:app_params	access:public
app_params::wd	include/image_renderer.h	/^    world* wd;$/;"	m	struct:app_params	access:public
app_params::width	include/image_renderer.h	/^    size_t width;$/;"	m	struct:app_params	access:public
app_params::window	include/image_renderer.h	/^    SDL_Window* window;$/;"	m	struct:app_params	access:public
b	include/architecture.h	/^    Uint8 b;$/;"	m	struct:color	access:public
bbox	include/architecture.h	/^typedef struct bbox$/;"	s
bbox	include/architecture.h	/^}bbox;$/;"	t	typeref:struct:bbox
bbox::c_size	include/architecture.h	/^    size_t c_size;$/;"	m	struct:bbox	access:public
bbox::children	include/architecture.h	/^    struct bbox ** children;$/;"	m	struct:bbox	typeref:struct:bbox::bbox	access:public
bbox::max	include/architecture.h	/^    point max;$/;"	m	struct:bbox	access:public
bbox::maxtotal	include/architecture.h	/^    size_t maxtotal;$/;"	m	struct:bbox	access:public
bbox::min	include/architecture.h	/^    point min;$/;"	m	struct:bbox	access:public
bbox::total	include/architecture.h	/^    size_t total;$/;"	m	struct:bbox	access:public
bbox::tris	include/architecture.h	/^    triangle * tris;$/;"	m	struct:bbox	access:public
bounding_box	include/architecture.h	/^	bbox * bounding_box;$/;"	m	struct:mesh	access:public
build_bbox	include/bbox.h	/^bbox* build_bbox(size_t depth, size_t no_tri, size_t no_extra);$/;"	p	signature:(size_t depth, size_t no_tri, size_t no_extra)
build_bbox	src/bbox.c	/^bbox* build_bbox(size_t depth, size_t no_tri, size_t no_extra)$/;"	f	signature:(size_t depth, size_t no_tri, size_t no_extra)
c	include/architecture.h	/^    color c;$/;"	m	struct:ray	access:public
c_size	include/architecture.h	/^    size_t c_size;$/;"	m	struct:bbox	access:public
cam	include/image_renderer.h	/^    camera* cam;$/;"	m	struct:app_params	access:public
camera	include/architecture.h	/^typedef struct camera$/;"	s
camera	include/architecture.h	/^}camera;$/;"	t	typeref:struct:camera
camera::FOV	include/architecture.h	/^    size_t FOV;$/;"	m	struct:camera	access:public
camera::id_c	include/architecture.h	/^	size_t id_c;$/;"	m	struct:camera	access:public
camera::pitch	include/architecture.h	/^    float pitch;$/;"	m	struct:camera	access:public
camera::pos	include/architecture.h	/^	point pos;$/;"	m	struct:camera	access:public
camera::skybox	include/architecture.h	/^    SDL_Surface* skybox;$/;"	m	struct:camera	access:public
camera::yaw	include/architecture.h	/^    float yaw;$/;"	m	struct:camera	access:public
cameras	include/architecture.h	/^    camera ** cameras;$/;"	m	struct:world	access:public
cast_neighbour	include/raycast.h	/^int cast_neighbour(ray *src, ray tgt);$/;"	p	signature:(ray *src, ray tgt)
cast_neighbour	src/raycast.c	/^int cast_neighbour(ray *src, ray tgt){$/;"	f	signature:(ray *src, ray tgt)
children	include/architecture.h	/^    struct bbox ** children;$/;"	m	struct:bbox	typeref:struct:bbox::bbox	access:public
color	include/architecture.h	/^	point color;$/;"	m	struct:light	access:public
color	include/architecture.h	/^typedef struct color{$/;"	s
color	include/architecture.h	/^} color;$/;"	t	typeref:struct:color
color::b	include/architecture.h	/^    Uint8 b;$/;"	m	struct:color	access:public
color::g	include/architecture.h	/^    Uint8 g;$/;"	m	struct:color	access:public
color::r	include/architecture.h	/^    Uint8 r;$/;"	m	struct:color	access:public
compute_bounds_bbox	include/bbox.h	/^void compute_bounds_bbox(bbox* b);$/;"	p	signature:(bbox* b)
compute_bounds_bbox	src/bbox.c	/^void compute_bounds_bbox(bbox* b){$/;"	f	signature:(bbox* b)
compute_bounds_tri	include/bbox.h	/^void compute_bounds_tri(mesh* m, bbox* b);$/;"	p	signature:(mesh* m, bbox* b)
compute_bounds_tri	src/bbox.c	/^void compute_bounds_tri(mesh* m, bbox *bx){$/;"	f	signature:(mesh* m, bbox *bx)
compute_depth	include/bbox.h	/^size_t compute_depth(size_t nb_tri);$/;"	p	signature:(size_t nb_tri)
compute_depth	src/bbox.c	/^size_t compute_depth(size_t nb_tri){$/;"	f	signature:(size_t nb_tri)
compute_no_extra	include/bbox.h	/^size_t compute_no_extra(size_t no_tri, size_t tri_last_level, size_t depth);$/;"	p	signature:(size_t no_tri, size_t tri_last_level, size_t depth)
compute_no_extra	src/bbox.c	/^size_t compute_no_extra(size_t no_tri, size_t tri_last_level, size_t depth)$/;"	f	signature:(size_t no_tri, size_t tri_last_level, size_t depth)
compute_tri_last_level	include/bbox.h	/^size_t compute_tri_last_level(size_t depth, size_t no_tri);$/;"	p	signature:(size_t depth, size_t no_tri)
compute_tri_last_level	src/bbox.c	/^size_t compute_tri_last_level(size_t depth, size_t no_tri)$/;"	f	signature:(size_t depth, size_t no_tri)
copyp	include/utils.h	/^point copyp(point p);$/;"	p	signature:(point p)
copyp	src/utils.c	/^point copyp(point p){$/;"	f	signature:(point p)
cover_surface	src/image_renderer.c	/^void cover_surface(size_t fromx, size_t tox, size_t fromy, size_t toy, size_t width, size_t height, size_t size, camera* cam, world* w, ray* rays){$/;"	f	signature:(size_t fromx, size_t tox, size_t fromy, size_t toy, size_t width, size_t height, size_t size, camera* cam, world* w, ray* rays)
crossProduct	include/utils.h	/^point crossProduct(point a, point b);$/;"	p	signature:(point a, point b)
crossProduct	src/utils.c	/^ point crossProduct(point a, point b)$/;"	f	signature:(point a, point b)
depth	include/architecture.h	/^    size_t depth;$/;"	m	struct:mesh	access:public
dir	include/architecture.h	/^	point dir;$/;"	m	struct:light	access:public
dir	include/architecture.h	/^	point dir;$/;"	m	struct:ray	access:public
dot	include/utils.h	/^float dot(point a, point b);$/;"	p	signature:(point a, point b)
dot	src/utils.c	/^float dot(point  a, point  b)$/;"	f	signature:(point a, point b)
free_bbox	include/bbox.h	/^void free_bbox(bbox* b);$/;"	p	signature:(bbox* b)
free_bbox	src/bbox.c	/^void free_bbox(bbox* b){$/;"	f	signature:(bbox* b)
free_mesh	include/utils.h	/^void free_mesh(mesh * m);$/;"	p	signature:(mesh * m)
free_mesh	src/utils.c	/^void free_mesh(mesh * m)$/;"	f	signature:(mesh * m)
free_world	include/utils.h	/^void free_world(world * w);$/;"	p	signature:(world * w)
free_world	src/utils.c	/^void free_world(world * w)$/;"	f	signature:(world * w)
g	include/architecture.h	/^    Uint8 g;$/;"	m	struct:color	access:public
getPixelColor	src/raycast.c	/^void getPixelColor(SDL_Surface* surface, int x, int y, Uint8*r, Uint8*g,Uint8*b){$/;"	f	signature:(SDL_Surface* surface, int x, int y, Uint8*r, Uint8*g,Uint8*b)
get_id	src/raycast.c	/^int get_id(size_t w, size_t h, size_t x, size_t y){$/;"	f	signature:(size_t w, size_t h, size_t x, size_t y)
get_ray	include/raycast.h	/^ray get_ray(size_t width, size_t height, size_t x_pix, size_t y_pix, camera* cam);$/;"	p	signature:(size_t width, size_t height, size_t x_pix, size_t y_pix, camera* cam)
get_ray	src/raycast.c	/^ray get_ray(size_t width, size_t height, size_t x_pix, size_t y_pix, camera* cam){$/;"	f	signature:(size_t width, size_t height, size_t x_pix, size_t y_pix, camera* cam)
get_sky	src/raycast.c	/^void get_sky(point direction, camera* cam, color* c){$/;"	f	signature:(point direction, camera* cam, color* c)
get_vertex_from_triangle	include/utils.h	/^void get_vertex_from_triangle(mesh* m, triangle* tri, point* a, point* b, point *c);$/;"	p	signature:(mesh* m, triangle* tri, point* a, point* b, point *c)
get_vertex_from_triangle	src/utils.c	/^void get_vertex_from_triangle(mesh* m, triangle* tri, point* a, point* b, point *c){$/;"	f	signature:(mesh* m, triangle* tri, point* a, point* b, point *c)
height	include/image_renderer.h	/^    size_t height;$/;"	m	struct:app_params	access:public
hit	include/architecture.h	/^	int hit;$/;"	m	struct:ray	access:public
id_c	include/architecture.h	/^	size_t id_c;$/;"	m	struct:camera	access:public
id_l	include/architecture.h	/^	size_t id_l;$/;"	m	struct:light	access:public
id_m	include/architecture.h	/^	size_t id_m;$/;"	m	struct:mesh	access:public
init_bbox	include/bbox.h	/^bbox* init_bbox();$/;"	p	signature:()
init_bbox	src/bbox.c	/^bbox* init_bbox(){$/;"	f
init_camera	include/utils.h	/^camera * init_camera(size_t id, point pos, float pitch, float yaw, int FOV);$/;"	p	signature:(size_t id, point pos, float pitch, float yaw, int FOV)
init_camera	src/utils.c	/^camera * init_camera(size_t id, point pos, float pitch, float yaw, int FOV)$/;"	f	signature:(size_t id, point pos, float pitch, float yaw, int FOV)
init_light	include/utils.h	/^light * init_light(size_t id, point pos, point dir, point color, float intensity);$/;"	p	signature:(size_t id, point pos, point dir, point color, float intensity)
init_light	src/utils.c	/^light * init_light(size_t id, point pos, point dir, point color, float intensity)$/;"	f	signature:(size_t id, point pos, point dir, point color, float intensity)
init_mesh	include/utils.h	/^mesh * init_mesh(size_t no_vert, size_t no_tri, size_t id);$/;"	p	signature:(size_t no_vert, size_t no_tri, size_t id)
init_mesh	src/utils.c	/^mesh * init_mesh(size_t no_vert, size_t no_tri, size_t id)$/;"	f	signature:(size_t no_vert, size_t no_tri, size_t id)
init_point	include/utils.h	/^point * init_point(float x, float y, float z);$/;"	p	signature:(float x, float y, float z)
init_point	src/utils.c	/^point * init_point(float x, float y, float z)$/;"	f	signature:(float x, float y, float z)
init_ray	include/utils.h	/^ray * init_ray(point pos, point dir);$/;"	p	signature:(point pos, point dir)
init_ray	src/utils.c	/^ray * init_ray(point pos, point dir)$/;"	f	signature:(point pos, point dir)
init_triangle	include/utils.h	/^triangle *  init_triangle(size_t x, size_t y, size_t z);$/;"	p	signature:(size_t x, size_t y, size_t z)
init_triangle	src/utils.c	/^triangle *  init_triangle(size_t x, size_t y, size_t z)$/;"	f	signature:(size_t x, size_t y, size_t z)
init_world	include/utils.h	/^world * init_world();$/;"	p	signature:()
init_world	src/utils.c	/^world * init_world()$/;"	f
intensity	include/architecture.h	/^	float intensity;$/;"	m	struct:light	access:public
intersect_bbox	src/raycast.c	/^int intersect_bbox(ray* r, bbox* b){$/;"	f	signature:(ray* r, bbox* b)
light	include/architecture.h	/^typedef struct light$/;"	s
light	include/architecture.h	/^}light;$/;"	t	typeref:struct:light
light::color	include/architecture.h	/^	point color;$/;"	m	struct:light	access:public
light::dir	include/architecture.h	/^	point dir;$/;"	m	struct:light	access:public
light::id_l	include/architecture.h	/^	size_t id_l;$/;"	m	struct:light	access:public
light::intensity	include/architecture.h	/^	float intensity;$/;"	m	struct:light	access:public
light::pos	include/architecture.h	/^	point pos;$/;"	m	struct:light	access:public
light::spread	include/architecture.h	/^    float spread;$/;"	m	struct:light	access:public
lights	include/architecture.h	/^    light ** lights;$/;"	m	struct:world	access:public
load_object	include/obj_parser.h	/^void load_object(world* w, char* file, float scale, point pos);$/;"	p	signature:(world* w, char* file, float scale, point pos)
load_object	src/obj_parser.c	/^void load_object(world* w, char* file, float scale, point pos){$/;"	f	signature:(world* w, char* file, float scale, point pos)
m	include/architecture.h	/^    mesh* m;$/;"	m	struct:ray	access:public
main	src/main.c	/^int main(){$/;"	f
max	include/architecture.h	/^    point max;$/;"	m	struct:bbox	access:public
max	include/utils.h	/^float max(float x, float y);$/;"	p	signature:(float x, float y)
max	src/utils.c	/^float max(float x, float y){$/;"	f	signature:(float x, float y)
maxtotal	include/architecture.h	/^    size_t maxtotal;$/;"	m	struct:bbox	access:public
mesh	include/architecture.h	/^typedef struct mesh$/;"	s
mesh	include/architecture.h	/^}mesh;$/;"	t	typeref:struct:mesh
mesh::bounding_box	include/architecture.h	/^	bbox * bounding_box;$/;"	m	struct:mesh	access:public
mesh::depth	include/architecture.h	/^    size_t depth;$/;"	m	struct:mesh	access:public
mesh::id_m	include/architecture.h	/^	size_t id_m;$/;"	m	struct:mesh	access:public
mesh::no_extra	include/architecture.h	/^    size_t no_extra;$/;"	m	struct:mesh	access:public
mesh::tri_last_level	include/architecture.h	/^    size_t tri_last_level;$/;"	m	struct:mesh	access:public
mesh::v_size	include/architecture.h	/^	size_t v_size;$/;"	m	struct:mesh	access:public
mesh::vertexes	include/architecture.h	/^	point * vertexes;$/;"	m	struct:mesh	access:public
meshes	include/architecture.h	/^    mesh ** meshes;$/;"	m	struct:world	access:public
min	include/architecture.h	/^    point min;$/;"	m	struct:bbox	access:public
min	include/utils.h	/^float min(float x, float y);$/;"	p	signature:(float x, float y)
min	src/utils.c	/^float min(float x, float y){$/;"	f	signature:(float x, float y)
mint	include/architecture.h	/^    float mint;$/;"	m	struct:ray	access:public
minus	include/utils.h	/^point minus(point a, point b);$/;"	p	signature:(point a, point b)
minus	src/utils.c	/^point minus(point a, point b){$/;"	f	signature:(point a, point b)
minusp	include/utils.h	/^void minusp(point* a, point*b);$/;"	p	signature:(point* a, point*b)
minusp	src/utils.c	/^void minusp(point * a, point * b)$/;"	f	signature:(point * a, point * b)
no_extra	include/architecture.h	/^    size_t no_extra;$/;"	m	struct:mesh	access:public
norm	include/utils.h	/^float norm(point p);$/;"	p	signature:(point p)
norm	src/utils.c	/^float norm(point p){$/;"	f	signature:(point p)
normal	include/architecture.h	/^	point normal;$/;"	m	struct:triangle	access:public
normalize	include/utils.h	/^point normalize(point p);$/;"	p	signature:(point p)
normalize	src/utils.c	/^point normalize(point p){$/;"	f	signature:(point p)
npoint	include/utils.h	/^point npoint(float x, float y, float z);$/;"	p	signature:(float x, float y, float z)
npoint	src/utils.c	/^point npoint(float x, float y, float z){$/;"	f	signature:(float x, float y, float z)
parse	include/obj.h	/^void parse(char* path, world* w, float scale, point p);$/;"	p	signature:(char* path, world* w, float scale, point p)
parse	src/obj.c	/^void parse(char* path, world* w, float scale, point pos)$/;"	f	signature:(char* path, world* w, float scale, point pos)
pitch	include/architecture.h	/^    float pitch;$/;"	m	struct:camera	access:public
point	include/architecture.h	/^typedef struct point{$/;"	s
point	include/architecture.h	/^}point;$/;"	t	typeref:struct:point
point::x	include/architecture.h	/^	double x;$/;"	m	struct:point	access:public
point::y	include/architecture.h	/^	double y;$/;"	m	struct:point	access:public
point::z	include/architecture.h	/^	double z;$/;"	m	struct:point	access:public
pos	include/architecture.h	/^	point pos;$/;"	m	struct:camera	access:public
pos	include/architecture.h	/^	point pos;$/;"	m	struct:light	access:public
pos	include/architecture.h	/^	point pos;$/;"	m	struct:ray	access:public
ppoint	include/utils.h	/^void ppoint(point p, char* msg);$/;"	p	signature:(point p, char* msg)
ppoint	src/utils.c	/^void ppoint(point p, char* msg){$/;"	f	signature:(point p, char* msg)
proccess	src/obj.c	/^void proccess(char* line, int i, int p, int t, int n)$/;"	f	signature:(char* line, int i, int p, int t, int n)
r	include/architecture.h	/^    Uint8 r;$/;"	m	struct:color	access:public
ray	include/architecture.h	/^typedef struct ray$/;"	s
ray	include/architecture.h	/^}ray;$/;"	t	typeref:struct:ray
ray::c	include/architecture.h	/^    color c;$/;"	m	struct:ray	access:public
ray::dir	include/architecture.h	/^	point dir;$/;"	m	struct:ray	access:public
ray::hit	include/architecture.h	/^	int hit;$/;"	m	struct:ray	access:public
ray::m	include/architecture.h	/^    mesh* m;$/;"	m	struct:ray	access:public
ray::mint	include/architecture.h	/^    float mint;$/;"	m	struct:ray	access:public
ray::pos	include/architecture.h	/^	point pos;$/;"	m	struct:ray	access:public
ray::tri	include/architecture.h	/^	triangle *tri;$/;"	m	struct:ray	access:public
ray_cast	src/raycast.c	/^int ray_cast(mesh* m, ray* r, bbox* b){$/;"	f	signature:(mesh* m, ray* r, bbox* b)
ray_cast_neighbour	include/raycast.h	/^void ray_cast_neighbour(world* wd, camera* cam, size_t x, size_t y, size_t w, size_t h, ray rays[], size_t target_id, size_t max_rec);$/;"	p	signature:(world* wd, camera* cam, size_t x, size_t y, size_t w, size_t h, ray rays[], size_t target_id, size_t max_rec)
ray_cast_neighbour	src/raycast.c	/^void ray_cast_neighbour(world* wd, camera* cam, size_t x, size_t y, size_t w, size_t h, ray rays[w*h], size_t target_id, size_t max_rec){$/;"	f	signature:(world* wd, camera* cam, size_t x, size_t y, size_t w, size_t h, ray rays[w*h], size_t target_id, size_t max_rec)
ray_cast_pixel	include/raycast.h	/^ray ray_cast_pixel(camera* cam, world* wd, size_t x, size_t y, size_t w, size_t h);$/;"	p	signature:(camera* cam, world* wd, size_t x, size_t y, size_t w, size_t h)
ray_cast_pixel	src/raycast.c	/^ray ray_cast_pixel(camera* cam, world* wd, size_t x, size_t y, size_t w, size_t h){$/;"	f	signature:(camera* cam, world* wd, size_t x, size_t y, size_t w, size_t h)
ray_intersect	include/raycast.h	/^void ray_intersect(triangle * tri, mesh * m, ray * r);$/;"	p	signature:(triangle * tri, mesh * m, ray * r)
ray_intersect	src/raycast.c	/^void ray_intersect(triangle * tri, mesh * m, ray * r) {$/;"	f	signature:(triangle * tri, mesh * m, ray * r)
render	src/image_renderer.c	/^void render(Uint32* pixels, int width, int height, camera* cam, world* w)$/;"	f	signature:(Uint32* pixels, int width, int height, camera* cam, world* w)
render_camera	include/image_renderer.h	/^int render_camera(app_params* params);$/;"	p	signature:(app_params* params)
render_camera	src/image_renderer.c	/^int render_camera(app_params* params){$/;"	f	signature:(app_params* params)
renderer	include/image_renderer.h	/^    SDL_Renderer* renderer;$/;"	m	struct:app_params	access:public
rm	Makefile	/^rm       = rm -f$/;"	m
scale	include/utils.h	/^point scale(point a, float s);$/;"	p	signature:(point a, float s)
scale	src/utils.c	/^point scale(point a, float s){$/;"	f	signature:(point a, float s)
scalep	include/utils.h	/^void scalep(point *a, float s);$/;"	p	signature:(point *a, float s)
scalep	src/utils.c	/^void scalep(point * a, float s)$/;"	f	signature:(point * a, float s)
setup_window	include/image_renderer.h	/^int setup_window(app_params* params);$/;"	p	signature:(app_params* params)
setup_window	src/image_renderer.c	/^int setup_window(app_params* params){$/;"	f	signature:(app_params* params)
size_c	include/architecture.h	/^    size_t size_c;$/;"	m	struct:world	access:public
size_l	include/architecture.h	/^    size_t size_l;$/;"	m	struct:world	access:public
size_m	include/architecture.h	/^    size_t size_m;$/;"	m	struct:world	access:public
skybox	include/architecture.h	/^    SDL_Surface* skybox;$/;"	m	struct:camera	access:public
spread	include/architecture.h	/^    float spread;$/;"	m	struct:light	access:public
take_max	src/bbox.c	/^void take_max(point* p, point o){$/;"	f	signature:(point* p, point o)
take_min	src/bbox.c	/^void take_min(point* p, point o){$/;"	f	signature:(point* p, point o)
total	include/architecture.h	/^    size_t total;$/;"	m	struct:bbox	access:public
tri	include/architecture.h	/^	triangle *tri;$/;"	m	struct:ray	access:public
tri_last_level	include/architecture.h	/^    size_t tri_last_level;$/;"	m	struct:mesh	access:public
triangle	include/architecture.h	/^typedef struct triangle$/;"	s
triangle	include/architecture.h	/^}triangle;$/;"	t	typeref:struct:triangle
triangle::normal	include/architecture.h	/^	point normal;$/;"	m	struct:triangle	access:public
triangle::vert	include/architecture.h	/^	size_t vert[3];$/;"	m	struct:triangle	access:public
tris	include/architecture.h	/^    triangle * tris;$/;"	m	struct:bbox	access:public
v_size	include/architecture.h	/^	size_t v_size;$/;"	m	struct:mesh	access:public
vert	include/architecture.h	/^	size_t vert[3];$/;"	m	struct:triangle	access:public
vertexes	include/architecture.h	/^	point * vertexes;$/;"	m	struct:mesh	access:public
wd	include/image_renderer.h	/^    world* wd;$/;"	m	struct:app_params	access:public
width	include/image_renderer.h	/^    size_t width;$/;"	m	struct:app_params	access:public
window	include/image_renderer.h	/^    SDL_Window* window;$/;"	m	struct:app_params	access:public
world	include/architecture.h	/^typedef struct world$/;"	s
world	include/architecture.h	/^}world;$/;"	t	typeref:struct:world
world::cameras	include/architecture.h	/^    camera ** cameras;$/;"	m	struct:world	access:public
world::lights	include/architecture.h	/^    light ** lights;$/;"	m	struct:world	access:public
world::meshes	include/architecture.h	/^    mesh ** meshes;$/;"	m	struct:world	access:public
world::size_c	include/architecture.h	/^    size_t size_c;$/;"	m	struct:world	access:public
world::size_l	include/architecture.h	/^    size_t size_l;$/;"	m	struct:world	access:public
world::size_m	include/architecture.h	/^    size_t size_m;$/;"	m	struct:world	access:public
x	include/architecture.h	/^	double x;$/;"	m	struct:point	access:public
y	include/architecture.h	/^	double y;$/;"	m	struct:point	access:public
yaw	include/architecture.h	/^    float yaw;$/;"	m	struct:camera	access:public
z	include/architecture.h	/^	double z;$/;"	m	struct:point	access:public
